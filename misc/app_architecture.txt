APP ARCHITECTURE


==========================================================

ROM LOADING/NARC EXTRACTION

rom_loader.py extracts rom narcs and converts narcs to json 
json, narcs, texts are stored in /ROM_NAME

current rom name is stored in session_settings.json, this is what tells the app you have an in progress project

json files have "raw" and "readable" copies of narc data

"readable" is the "raw" formatted to be presented to the front end, and is what is changed when the user makes edits, along with additional fields like names, ev yields etc.

"raw" is data directly extracted from the narc

logic for reading narc data and writing to json in *_reader.py files

===========================================================

PARSING DATA FOR FRONTEND

ruby access JSON FILES (routes.rb), access functions are in models/model.rb

ruby renders html from the json files using the "readable" portion (routes.rb, views)

===========================================================

USER INTERFACE

when user makes an edit

user edits are sent by ajax/js to ruby endpoints defined in routes.rb 

code for event bindings, and ajax calls in public/scripts/index.js


example data format sent by ajax:  {file_id: x, field_name: y, value: z}


===========================================================

SAVING DATA to JSON

after edit request

routes.rb edits the "readable" portions of json using sent data (routes.rb)
routes.rb calls the appropriate *_writer.py to convert "readable" to "raw"

*_writer.py writes the new json data


logic for reading json data and writing to narcs in *_writer.py files

==================================================================

EXPORTING ROM

when user clicks export

narcs in ROM_NAME/narcs are updated with data from ROM_NAME/json by *_writer.py files

rom_saver.py packs each narc and saves a new rom to /exports/ROM_NAME.nds


