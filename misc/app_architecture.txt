APP ARCHITECTURE


==========================================================

ROM LOADING/NARC EXTRACTION

python extracts rom narcs and converts narcs to json (rom_loader.py)
json, narcs, texts are stored in /ROM_NAME

current rom name is stored in session_settings.json, this is what tells the app you have an in progress project

json files have "raw" and "readable" copies of narc data

"readable" is the "raw" formatted to be presented to the front end, and is what is changed when the user makes edits, along with additional fields like names, ev yields etc.

"raw" is data directly extracted from the narc

logic for reading narc data and writing to json in *_reader.py files

===========================================================

PARSING DATA FOR FRONTEND

ruby access JSON FILES (routes.rb), access functions are in models/model.rb

ruby renders html from the json files using the "readable" portion (routes.rb, views)

===========================================================

USER INTERFACE

user edits are sent by ajax/js to ruby endpoints defined in routes.rb 

code for event bindings, and ajax calls in public/scripts/index.js

ruby edits the "readable" portions of json using sent data (routes.rb)
example data format sent by ajax:  {file_id: x, field_name: y, value: z}


===========================================================

SAVING DATA

when user request to save data,

python scripts read the "readable" sections of json, and update the "raw" section accordingly

then python updates the narcs using the "raw" json data

narcs are then packed and rom is saved

logic for reading json data and writing to narcs in *_writer.py files

